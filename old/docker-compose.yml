# docker-compose.yml
# Defines the core infrastructure services for the Ariata project.

services:
  # PostgreSQL Database Service with pgvector and PostGIS extensions
  postgres:
    image: postgis/postgis:16-3.4
    container_name: ariata_postgres
    restart: always
    environment:
      # Database credentials - using defaults, override as needed
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      # Exposes the database on port 5432 to your local machine for easy access
      - "${POSTGRES_PORT}:5432"
    volumes:
      # This is the key to data persistence. It maps a named volume on your host
      # to the directory where Postgres stores its data inside the container.
      - postgres_data:/var/lib/postgresql/data
      # Init script to install pgvector
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  # MinIO S3-Compatible Object Storage Service
  minio:
    image: minio/minio:latest
    container_name: ariata_minio
    restart: always
    entrypoint: /scripts/minio-entrypoint.sh
    environment:
      # MinIO credentials - using defaults, override as needed
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      # Exposes the S3 API on port 9000
      - "${MINIO_PORT}:9000"
      # Exposes the MinIO web console on port 9001
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      # Persists all raw file data stored in MinIO
      - minio_data:/data
      # Mount the initialization script
      - ./scripts/minio-entrypoint.sh:/scripts/minio-entrypoint.sh:ro

  # Redis Service for Celery task queue
  redis:
    image: redis:7-alpine
    container_name: ariata_redis
    restart: always
    ports:
      # Exposes Redis on port 6379
      - "${REDIS_PORT}:6379"
    volumes:
      # Persists Redis data
      - redis_data:/data
    command: redis-server --appendonly yes

  # Web Application Service
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: ariata_web
    restart: always
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      # Database configuration - override to use Docker networking
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # Encryption key for credentials
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      # Redis configuration - override to use Docker networking
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      # Docker environment indicator
      DOCKER_CONTAINER: "true"
      # MinIO configuration - override to use Docker networking
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      # Google OAuth credentials (set these in .env or environment)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # AI Configuration
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      HF_TOKEN: ${HF_TOKEN}
      # URLs
      FRONTEND_URL: ${FRONTEND_URL}
      PROCESSING_SERVICE_URL: ${PROCESSING_SERVICE_URL}
    ports:
      - "${WEB_PORT}:3000"
      - "8000:3000"  # Legacy port mapping for API compatibility
      - "4983:4983"  # Drizzle Studio
    volumes:
      # Mount source code for hot reload
      - ./apps/web/src:/app/src
      - ./apps/web/static:/app/static
      - ./apps/web/package.json:/app/package.json
      - ./apps/web/svelte.config.js:/app/svelte.config.js
      - ./apps/web/vite.config.ts:/app/vite.config.ts
      - ./apps/web/tsconfig.json:/app/tsconfig.json
      - ./apps/web/scripts:/app/scripts
      - ./scripts:/app/root-scripts
      - ./sources:/sources
      - ./tests:/app/tests
      # Named volume for node_modules to persist between container restarts
      - web_node_modules:/app/node_modules

  # Celery Worker Service
  celery-worker:
    build:
      context: .
      dockerfile: ./sources/base/Dockerfile
    container_name: ariata_celery_worker
    restart: always
    command: sh -c "cd /sources/base && uv run celery -A scheduler.celery_app worker --loglevel=info --concurrency=2 -Q celery,priority"
    depends_on:
      - postgres
      - redis
      - minio
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # Redis configuration
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      # MinIO configuration
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      # Google OAuth credentials
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # Auth proxy URL
      AUTH_PROXY_URL: https://auth.ariata.com
      # Python path for hot reloading from /sources
      PYTHONPATH: /:/sources:$${PYTHONPATH}
    volumes:
      # Mount for hot reload in development
      - ./sources:/sources
      - ./scripts:/app/scripts
      - ./tests:/app/tests

  # Celery Beat Service (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: ./sources/base/Dockerfile
    container_name: ariata_celery_beat
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      # Database configuration
      DATABASE_URL: postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # Redis configuration
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      # Python path for hot reloading from /sources
      PYTHONPATH: /:/sources:$${PYTHONPATH}
    command: sh -c "cd /sources/base && uv run celery -A scheduler.celery_app beat --loglevel=info"
    volumes:
      # Mount for hot reload in development
      - ./sources:/sources
      - ./scripts:/app/scripts
      - ./tests:/app/tests

# Named volumes are managed by Docker and persist data outside the container lifecycle.
volumes:
  postgres_data:
  minio_data:
  redis_data:
  web_node_modules:
