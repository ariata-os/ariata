-- Auto-generated stream table migrations
-- Generated at: 2025-10-03T00:19:38.339491Z
-- Source: YAML stream configurations in sources/
--
-- DO NOT EDIT THIS FILE MANUALLY
-- To update schemas, modify the _stream.yaml files and regenerate
--
-- Naming convention: stream_{source}_{stream}
-- Examples: stream_ios_location, stream_google_calendar, stream_mac_apps

-- GOOGLE - calendar
-- Calendar events and appointments from Google Calendar
CREATE TABLE IF NOT EXISTS stream_google_calendar (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    event_id VARCHAR(200) NOT NULL,
    calendar_id VARCHAR(200) NOT NULL,
    ical_uid VARCHAR(200),
    summary VARCHAR(500),
    description TEXT,
    location VARCHAR(500),
    status VARCHAR(20),
    start_time TIMESTAMPTZ NOT NULL,
    end_time TIMESTAMPTZ NOT NULL,
    all_day BOOLEAN DEFAULT FALSE,
    timezone VARCHAR(50),
    html_link VARCHAR(500),
    created_time TIMESTAMPTZ,
    updated_time TIMESTAMPTZ,
    event_type VARCHAR(50),
    creator JSONB,
    organizer JSONB,
    attendees JSONB,
    reminders JSONB,
    recurrence JSONB,
    conference_data JSONB,
    full_event JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_google_calendar_timestamp ON stream_google_calendar(timestamp) USING btree;
-- Index for event start times
CREATE INDEX IF NOT EXISTS idx_google_calendar_starttime ON stream_google_calendar(start_time) USING btree;
-- Index for event lookups
CREATE INDEX IF NOT EXISTS idx_google_calendar_eventid ON stream_google_calendar(event_id) USING btree;

COMMENT ON TABLE stream_google_calendar IS 'Calendar events and appointments from Google Calendar';


--------------------------------------------------------------------------------

-- GOOGLE - gmail
-- Email messages from Gmail
CREATE TABLE IF NOT EXISTS stream_google_gmail (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    message_id VARCHAR(200) NOT NULL,
    thread_id VARCHAR(200) NOT NULL,
    history_id VARCHAR(50),
    subject VARCHAR(500),
    snippet VARCHAR(500),
    body_text TEXT,
    body_html TEXT,
    from_email VARCHAR(255),
    from_name VARCHAR(255),
    to_emails JSONB,
    cc_emails JSONB,
    bcc_emails JSONB,
    reply_to_emails JSONB,
    labels JSONB,
    categories JSONB,
    is_read BOOLEAN DEFAULT FALSE,
    is_starred BOOLEAN DEFAULT FALSE,
    is_important BOOLEAN DEFAULT FALSE,
    is_spam BOOLEAN DEFAULT FALSE,
    is_trash BOOLEAN DEFAULT FALSE,
    has_attachments BOOLEAN DEFAULT FALSE,
    attachment_count INTEGER DEFAULT 0,
    attachments JSONB,
    size_bytes INTEGER,
    received_date TIMESTAMPTZ NOT NULL,
    sent_date TIMESTAMPTZ,
    headers JSONB,
    full_message JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_google_gmail_timestamp ON stream_google_gmail(timestamp) USING btree;
-- Index for received date queries
CREATE INDEX IF NOT EXISTS idx_google_gmail_receiveddate ON stream_google_gmail(received_date) USING btree;
-- Index for message lookups
CREATE INDEX IF NOT EXISTS idx_google_gmail_messageid ON stream_google_gmail(message_id) USING btree;
-- Index for thread grouping
CREATE INDEX IF NOT EXISTS idx_google_gmail_threadid ON stream_google_gmail(thread_id) USING btree;
-- Index for sender queries
CREATE INDEX IF NOT EXISTS idx_google_gmail_fromemail ON stream_google_gmail(from_email) USING btree;
-- Index for filtering by status
CREATE INDEX IF NOT EXISTS idx_google_gmail_isread ON stream_google_gmail(is_read, is_starred) USING btree;

COMMENT ON TABLE stream_google_gmail IS 'Email messages from Gmail';


--------------------------------------------------------------------------------

-- IOS - healthkit
-- Health metrics from iOS HealthKit including heart rate, HRV, steps, and activity
CREATE TABLE IF NOT EXISTS stream_ios_healthkit (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    heart_rate DOUBLE PRECISION,
    hrv DOUBLE PRECISION,
    activity_type VARCHAR(50),
    confidence DOUBLE PRECISION,
    steps INTEGER,
    active_energy DOUBLE PRECISION,
    sleep_stage VARCHAR(20),
    workout_type VARCHAR(50),
    workout_duration INTEGER,
    device_name VARCHAR(100),
    raw_data JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_ios_healthkit_timestamp ON stream_ios_healthkit(timestamp) USING btree;

COMMENT ON TABLE stream_ios_healthkit IS 'Health metrics from iOS HealthKit including heart rate, HRV, steps, and activity';


--------------------------------------------------------------------------------

-- IOS - location
-- GPS and location data from iOS Core Location
CREATE TABLE IF NOT EXISTS stream_ios_location (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    altitude DOUBLE PRECISION,
    horizontal_accuracy DOUBLE PRECISION,
    vertical_accuracy DOUBLE PRECISION,
    speed DOUBLE PRECISION,
    course DOUBLE PRECISION,
    floor INTEGER,
    activity_type VARCHAR(50),
    address VARCHAR(500),
    place_name VARCHAR(200),
    raw_data JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_ios_location_timestamp ON stream_ios_location(timestamp) USING btree;

COMMENT ON TABLE stream_ios_location IS 'GPS and location data from iOS Core Location';


--------------------------------------------------------------------------------

-- IOS - mic
-- Audio metadata and transcriptions from iOS microphone
CREATE TABLE IF NOT EXISTS stream_ios_mic (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    recording_id VARCHAR(100) NOT NULL,
    timestamp_start TIMESTAMPTZ NOT NULL,
    timestamp_end TIMESTAMPTZ NOT NULL,
    duration INTEGER NOT NULL,
    overlap_duration DOUBLE PRECISION,
    audio_format VARCHAR(10),
    sample_rate INTEGER,
    audio_level DOUBLE PRECISION,
    peak_level DOUBLE PRECISION,
    transcription_text TEXT,
    transcription_confidence DOUBLE PRECISION,
    language VARCHAR(10),
    minio_path VARCHAR(500),
    file_size INTEGER,
    raw_data JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index using timestamp field
CREATE INDEX IF NOT EXISTS idx_ios_mic_timestamp ON stream_ios_mic(timestamp) USING btree;
-- Index for start time queries
CREATE INDEX IF NOT EXISTS idx_ios_mic_timestampstart ON stream_ios_mic(timestamp_start) USING btree;

COMMENT ON TABLE stream_ios_mic IS 'Audio metadata and transcriptions from iOS microphone';


--------------------------------------------------------------------------------

-- MAC - apps
-- Application focus events from macOS
CREATE TABLE IF NOT EXISTS stream_mac_apps (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    app_name VARCHAR(200) NOT NULL,
    bundle_id VARCHAR(200),
    event_type VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_mac_apps_timestamp ON stream_mac_apps(timestamp) USING btree;
-- Index for app-specific queries
CREATE INDEX IF NOT EXISTS idx_mac_apps_appname ON stream_mac_apps(app_name, timestamp) USING btree;
-- Index for event type queries
CREATE INDEX IF NOT EXISTS idx_mac_apps_eventtype ON stream_mac_apps(event_type, timestamp) USING btree;

COMMENT ON TABLE stream_mac_apps IS 'Application focus events from macOS';


--------------------------------------------------------------------------------

-- MAC - messages
-- iMessage and SMS messages from macOS
CREATE TABLE IF NOT EXISTS stream_mac_messages (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    message_id VARCHAR(200) NOT NULL,
    chat_id VARCHAR(200) NOT NULL,
    handle_id VARCHAR(200),
    text TEXT,
    service VARCHAR(50),
    is_from_me BOOLEAN NOT NULL DEFAULT FALSE,
    date TIMESTAMPTZ NOT NULL,
    date_read TIMESTAMPTZ,
    date_delivered TIMESTAMPTZ,
    is_read BOOLEAN DEFAULT FALSE,
    is_delivered BOOLEAN DEFAULT FALSE,
    is_sent BOOLEAN DEFAULT FALSE,
    cache_has_attachments BOOLEAN DEFAULT FALSE,
    attachment_count INTEGER,
    attachment_info JSONB,
    group_title VARCHAR(500),
    associated_message_guid VARCHAR(200),
    associated_message_type INTEGER,
    expressive_send_style_id VARCHAR(100),
    raw_data JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_mac_messages_timestamp ON stream_mac_messages(timestamp) USING btree;
-- Unique message ID index
CREATE UNIQUE INDEX IF NOT EXISTS idx_mac_messages_messageid ON stream_mac_messages(message_id) USING btree;
-- Index for chat-specific queries
CREATE INDEX IF NOT EXISTS idx_mac_messages_chatid ON stream_mac_messages(chat_id, date) USING btree;
-- Index for sent/received filtering
CREATE INDEX IF NOT EXISTS idx_mac_messages_isfromme ON stream_mac_messages(is_from_me, date) USING btree;
-- Composite unique constraint for deduplication
CREATE UNIQUE INDEX IF NOT EXISTS idx_mac_messages_sourceid ON stream_mac_messages(source_id, message_id) USING btree;

COMMENT ON TABLE stream_mac_messages IS 'iMessage and SMS messages from macOS';


--------------------------------------------------------------------------------

-- NOTION - pages
-- Pages and databases from Notion workspace
CREATE TABLE IF NOT EXISTS stream_notion_pages (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    page_id VARCHAR(100) NOT NULL,
    parent_id VARCHAR(100),
    parent_type VARCHAR(20),
    title VARCHAR(500),
    object_type VARCHAR(20),
    archived BOOLEAN DEFAULT FALSE,
    url VARCHAR(500),
    created_time TIMESTAMPTZ,
    created_by VARCHAR(100),
    last_edited_time TIMESTAMPTZ,
    last_edited_by VARCHAR(100),
    content_text TEXT,
    content_markdown TEXT,
    properties JSONB,
    icon JSONB,
    cover JSONB,
    parent JSONB,
    blocks JSONB,
    minio_path VARCHAR(500),
    full_page JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_notion_pages_timestamp ON stream_notion_pages(timestamp) USING btree;
-- Index for edit time queries
CREATE INDEX IF NOT EXISTS idx_notion_pages_lasteditedtime ON stream_notion_pages(last_edited_time) USING btree;
-- Index for page lookups
CREATE INDEX IF NOT EXISTS idx_notion_pages_pageid ON stream_notion_pages(page_id) USING btree;

COMMENT ON TABLE stream_notion_pages IS 'Pages and databases from Notion workspace';


--------------------------------------------------------------------------------

-- STRAVA - activities
-- Fitness activities and workouts from Strava
CREATE TABLE IF NOT EXISTS stream_strava_activities (
    id BIGSERIAL PRIMARY KEY,
    source_id TEXT NOT NULL REFERENCES sources(id) ON DELETE CASCADE,
    timestamp TIMESTAMPTZ NOT NULL,
    activity_id BIGINT NOT NULL,
    external_id VARCHAR(200),
    name VARCHAR(500),
    type VARCHAR(50),
    sport_type VARCHAR(50),
    workout_type INTEGER,
    distance DOUBLE PRECISION,
    moving_time INTEGER,
    elapsed_time INTEGER,
    total_elevation_gain DOUBLE PRECISION,
    elev_high DOUBLE PRECISION,
    elev_low DOUBLE PRECISION,
    average_speed DOUBLE PRECISION,
    max_speed DOUBLE PRECISION,
    average_heartrate DOUBLE PRECISION,
    max_heartrate DOUBLE PRECISION,
    average_cadence DOUBLE PRECISION,
    average_watts DOUBLE PRECISION,
    kilojoules DOUBLE PRECISION,
    start_date TIMESTAMPTZ NOT NULL,
    start_date_local TIMESTAMPTZ,
    timezone VARCHAR(50),
    achievement_count INTEGER,
    kudos_count INTEGER,
    comment_count INTEGER,
    start_latlng JSONB,
    end_latlng JSONB,
    map JSONB,
    splits_metric JSONB,
    splits_standard JSONB,
    segment_efforts JSONB,
    gear JSONB,
    photos JSONB,
    stats JSONB,
    full_activity JSONB,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Primary time-series index
CREATE INDEX IF NOT EXISTS idx_strava_activities_timestamp ON stream_strava_activities(timestamp) USING btree;
-- Index for activity start times
CREATE INDEX IF NOT EXISTS idx_strava_activities_startdate ON stream_strava_activities(start_date) USING btree;
-- Index for activity lookups
CREATE INDEX IF NOT EXISTS idx_strava_activities_activityid ON stream_strava_activities(activity_id) USING btree;

COMMENT ON TABLE stream_strava_activities IS 'Fitness activities and workouts from Strava';


--------------------------------------------------------------------------------

